//***********************************************************************
//*                                                                     *
//*                  Copyright (c) 1985-2022, AMI.                      *
//*                                                                     *
//*      All rights reserved. Subject to AMI licensing agreement.       *
//*                                                                     *
//***********************************************************************
/**@file
 * This file contains the I2c Handling functions
 */

#ifndef COMMON_I2C_H_
#define COMMON_I2C_H_

#include <string.h>
#include <stdint.h>
#include <stdbool.h>
#include "status/rot_status.h"

#define	I2C_SLAVE_ERROR(code)		ROT_ERROR (ROT_MODULE_I2C_SLAVE, code)
/**
 * Error codes that can be generated by an I2C slave driver.
 */
enum {
	I2C_SLAVE_INVALID_ARGUMENT = I2C_SLAVE_ERROR (0x00),		/**< Input parameter is null or not valid. */
	I2C_SLAVE_NO_MEMORY = I2C_SLAVE_ERROR (0x01),				/**< Memory allocation failed. */
	I2C_SLAVE_NO_DEVICE = I2C_SLAVE_ERROR (0x02),				/**< Not found device */
};
/**
 * Defines the interface to an I2C slave
 */

struct i2c_slave_interface {
	/**
	 * Initial I2C device to slave device using provided interface
	 *
	 * @param i2c I2C slave interface to use
	 * @param DevName I2C device name (EX:I2C_0 or I2C_1)
	 * @param slave_addr I2C slave device address to setting
	 *
	 * @return Transfer status, 0 if success or an error code.
	 */
	int (*InitSlaveDev) (struct i2c_slave_interface *i2c, char *DevName, uint8_t slave_addr);
};

int I2cSlaveInit (struct i2c_slave_interface *I2cSlaveEngine);

#endif /* COMMON_I2C_H_ */